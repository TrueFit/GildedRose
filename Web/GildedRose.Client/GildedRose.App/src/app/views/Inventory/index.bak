import * as React from "react";
import * as style from "./style.css";
import { connect } from "react-redux";
import { bindActionCreators, Dispatch } from "redux";
import { RouteComponentProps } from "react-router";
import { InventoryActions } from "app/actions";
import { RootState } from "app/reducers";
import { InventoryModel } from "app/models";
import { omit } from "../../utils";
import { InventoryGrid } from "../../../../../GildedRose.Core/src/components/InventoryGrid";

const FILTER_VALUES = (Object.keys(InventoryModel.Filter) as Array<keyof typeof InventoryModel.Filter>)
  .map(
    key => InventoryModel.Filter[key],
  );

const FILTER_FUNCTIONS: Record<InventoryModel.Filter, (Inventory: InventoryModel) => boolean> = {
  [InventoryModel.Filter.SHOW_ALL]: () => true,
  [InventoryModel.Filter.SHOW_ACTIVE]: (Inventory: InventoryModel) => !Inventory,
};

export namespace Inventory {
  export interface Props extends RouteComponentProps<void> {
    Inventory: RootState.InventoryState;
    actions: InventoryActions;
    filter: InventoryModel.Filter;
  }
}

@connect(
  (state: RootState, ownProps): Pick<App.Props, "Inventory" | "filter"> => {
    const hash = ownProps.location && ownProps.location.hash.replace("#", "");
    const filter = FILTER_VALUES.find(value => value === hash) || InventoryModel.Filter.SHOW_ALL;
    return { Inventory: state.Inventory, filter };
  },
  (dispatch: Dispatch): Pick<Inventory.Props, "actions"> => ({
    actions: bindActionCreators(omit(InventoryActions, "Type"), dispatch),
  }),
)
export class Inventory extends React.Component<Inventory.Props> {
  public static defaultProps: Partial<Inventory.Props> = {
    filter: InventoryModel.Filter.SHOW_ALL,
  };

  // tslint:disable-next-line:no-any
  constructor(props: Inventory.Props, context?: any) {
    super(props, context);
    this.handleClearCompleted = this.handleClearCompleted.bind(this);
    this.handleFilterChange = this.handleFilterChange.bind(this);
  }

  public render(): JSX.Element {
    const { Inventory, actions, filter } = this.props;
    const activeCount = Inventory.length - Inventory.filter((Inventory: InventoryModel) => {
      return Inventory.completed;
    }).length;
    const filteredInventory = filter ? Inventory.filter(FILTER_FUNCTIONS[filter]) : Inventory;
    const completedCount = Inventory
      .reduce((count: number, Inventory: InventoryModel) => {
        return (Inventory.completed ? count + 1 : count);
      }, 0);

    return (
      <div className={style.normal}>
        <InventoryGrid Inventory={filteredInventory} actions={actions} />
        />
      </div>
    );
  }

  private handleClearCompleted(): void {
    const hasCompletedInventory = this.props.Inventory.some((Inventory: InventoryModel) => Inventory.completed || false);
    if (hasCompletedInventory) {
      this.props.actions.clearCompleted();
    }
  }

  private handleFilterChange(filter: InventoryModel.Filter): void {
    this.props.history.push(`#${filter}`);
  }
}
