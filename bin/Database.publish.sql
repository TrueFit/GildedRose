/*
Deployment script for GildedRoseInventory

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar Environment "Dev"
:setvar DatabaseName "GildedRoseInventory"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Config]...';


GO
CREATE TABLE [dbo].[Config] (
    [Key]   VARCHAR (200) NOT NULL,
    [Value] VARCHAR (MAX) NULL,
    CONSTRAINT [PK_Config] PRIMARY KEY CLUSTERED ([Key] ASC)
);


GO
PRINT N'Creating [dbo].[InventoryItem]...';


GO
CREATE TABLE [dbo].[InventoryItem] (
    [InventoryItemId]     INT            IDENTITY (1, 1) NOT NULL,
    [InventoryItemTypeId] SMALLINT       NOT NULL,
    [Name]                VARCHAR (100)  NOT NULL,
    [Description]         VARCHAR (1000) NULL,
    [InitialQuality]      FLOAT (53)     NOT NULL,
    [CurrentQuality]      FLOAT (53)     NOT NULL,
    [InventoryDate]       DATETIME       NOT NULL,
    [SellByDate]          DATETIME       NULL,
    [SaleDate]            DATETIME       NULL,
    [DiscardDate]         DATETIME       NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [ModifiedDate]        DATETIME       NULL,
    CONSTRAINT [PK_INVENTORY] PRIMARY KEY CLUSTERED ([InventoryItemId] ASC)
);


GO
PRINT N'Creating [dbo].[InventoryItemType]...';


GO
CREATE TABLE [dbo].[InventoryItemType] (
    [InventoryItemTypeId]    SMALLINT      IDENTITY (1, 1) NOT NULL,
    [Name]                   VARCHAR (50)  NOT NULL,
    [Description]            VARCHAR (500) NULL,
    [QualityDeltaStrategyId] TINYINT       NOT NULL,
    [BaseDelta]              FLOAT (53)    NOT NULL,
    [MinQuality]             FLOAT (53)    NOT NULL,
    [MaxQuality]             FLOAT (53)    NOT NULL,
    [CreatedDate]            DATETIME      NOT NULL,
    [ModifiedDate]           DATETIME      NULL,
    CONSTRAINT [PK_InventoryItemType] PRIMARY KEY CLUSTERED ([InventoryItemTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[QualityDeltaStrategy]...';


GO
CREATE TABLE [dbo].[QualityDeltaStrategy] (
    [QualityDeltaStrategyId] TINYINT        NOT NULL,
    [Name]                   VARCHAR (100)  NOT NULL,
    [Description]            VARCHAR (1000) NULL,
    CONSTRAINT [PK_QualityDeltaStrategy] PRIMARY KEY CLUSTERED ([QualityDeltaStrategyId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_InventoryItem_InventoryItemType]...';


GO
ALTER TABLE [dbo].[InventoryItem]
    ADD CONSTRAINT [FK_InventoryItem_InventoryItemType] FOREIGN KEY ([InventoryItemTypeId]) REFERENCES [dbo].[InventoryItemType] ([InventoryItemTypeId]);


GO
PRINT N'Creating [dbo].[FK_InventoryItemType_QualityDeltaStrategy]...';


GO
ALTER TABLE [dbo].[InventoryItemType]
    ADD CONSTRAINT [FK_InventoryItemType_QualityDeltaStrategy] FOREIGN KEY ([QualityDeltaStrategyId]) REFERENCES [dbo].[QualityDeltaStrategy] ([QualityDeltaStrategyId]);


GO
PRINT N'Creating [dbo].[InventoryItem_Search]...';


GO
CREATE PROCEDURE dbo.InventoryItem_Search (
	@IncludeAvailable bit
,	@IncludeExpired bit
,	@IncludeSold bit
,	@IncludeDiscarded bit
,	@OrderByClause varchar(MAX)
,	@Skip int
,	@Take int
,	@Now datetime
,	@TotalRows int OUTPUT
) AS

--Creates a dynamic query against InventoryItems

SET @Now = ISNULL(@Now, GETDATE())

DECLARE @WhereClause varchar(MAX) = null

IF @IncludeAvailable = 0 AND @IncludeExpired = 0 AND @IncludeSold = 0 AND @IncludeDiscarded = 0
	--Do what now?
	SET @WhereClause = '1 = 0'
ELSE IF @IncludeAvailable = 1
BEGIN
	--If IncludAvailable is true, start from the set of all records and exclude things we don't want
	IF @IncludeExpired = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.CurrentQuality > 0'

	
	IF @IncludeSold = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.SaleDate IS NULL'

	IF @IncludeDiscarded = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.DiscardDate IS NULL'		
END
ELSE
BEGIN
	--If IncludeAvailable is false, start from an empty set and add the the things we do want
	IF @IncludeExpired = 1
		SET @WhereClause = ISNULL(@WhereClause + '
    OR ', '(') + 'II.CurrentQuality <= 0'

	IF @IncludeSold = 1
		SET @WhereClause = ISNULL(@WhereClause + '
    OR ', '(') + 'II.SaleDate IS NOT NULL'

	IF @IncludeDiscarded = 1
		SET @WhereClause = ISNULL(@WhereClause + '
    OR ', '(') + 'II.DiscardDate IS NOT NULL'		

	SET @WhereClause = @WhereClause + ')'
	
	IF @IncludeExpired = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.CurrentQuality > 0'

	IF @IncludeSold = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.SaleDate IS NULL'

	IF @IncludeDiscarded = 0
		SET @WhereClause = ISNULL(@WhereClause + '
    AND ', '') + 'II.DiscardDate IS NULL'		

END

DECLARE @sqlCount nvarchar(MAX) = 'SELECT @TotalRows = COUNT(1)
FROM dbo.InventoryItem II' + ISNULL('
WHERE
	' + @WhereClause, '')

DECLARE @sqlRows nvarchar(MAX) = 'SELECT II.*
FROM 
	dbo.InventoryItem		II
	 INNER JOIN
	dbo.InventoryItemType	IIT	ON	IIT.InventoryItemTypeId = II.InventoryItemTypeId' + ISNULL('
WHERE
	' + @WhereClause, '')
	+ CASE WHEN NULLIF(RTRIM(@OrderByClause), '') IS NOT NULL THEN '
ORDER BY ' + @OrderByClause 
		+ CASE WHEN @Skip >= 0 AND @Take > 0 THEN '
OFFSET ' + CAST(@Skip as varchar(10)) + ' ROWS FETCH NEXT ' + CAST(@Take AS varchar(10)) + ' ROWS ONLY'
			ELSE ''
		END
		ELSE ''
	END

PRINT 'Executing SQL:
' + @sqlRows

EXEC sp_executesql @sqlCount, N'@Now datetime, @TotalRows int OUTPUT', @Now, @TotalRows OUTPUT
EXEC sp_executesql @sqlRows, N'@Now datetime', @Now
GO
PRINT 'Executing Data/PostDeploymentData.sql...'

--Declare constants used in BaseData scripts
DECLARE @Now datetime = GETDATE()
PRINT 'Executing Data/BaseData/_Constants.sql...'

DECLARE @Today date = CAST(@Now AS date)
DECLARE @Tomorrow date = DATEADD(DAY, 1, @Today)
DECLARE @EndOfToday datetime = DATEADD(SECOND, -1, CAST(@Tomorrow AS datetime))
DECLARE @ThisYear date = DATEADD(DAY, -DATEPART(DAYOFYEAR, @Today) + 1, @Today)

DECLARE @Config_SimulationDateOffset varchar(200) = 'SimulationDateOffset'

DECLARE @QualityDeltaStrategy_Linear        tinyint = 1
DECLARE @QualityDeltaStrategy_InverseLinear tinyint = 2
DECLARE @QualityDeltaStrategy_Static        tinyint = 3
DECLARE @QualityDeltaStrategy_Event         tinyint = 4



--Load Base Data for all environemnts
INSERT INTO dbo.Config ([Key], Value)
VALUES
	(@Config_SimulationDateOffset, '0.00:00:00')
INSERT INTO dbo.QualityDeltaStrategy (QualityDeltaStrategyId, Name, Description)
VALUES
	(@QualityDeltaStrategy_Linear       , 'Linear'        , 'Quality decreases by a fixed amount per day until Sell By Date when it begins decreaseing at double the rate.')
,	(@QualityDeltaStrategy_InverseLinear, 'Inverse Linear', 'Quality increases by a fixed amount per day.')
,	(@QualityDeltaStrategy_Static       , 'Static'        , 'Quality is a fixed constant.')
,	(@QualityDeltaStrategy_Event        , 'Event'         , 'Quality decrease by a fixed amount per day.  Ten days before the event, the rate doubles.  Five days before an event, the rate triples.  The day after the event, quality goes to zero.')


--Declare constants used in the environment specific scripts
PRINT 'Executing Data/TestData/_Constants.sql...'

DECLARE @Dev_InventoryItemType_Weapon        smallint = 1
DECLARE @Dev_InventoryItemType_Armor         smallint = 2
DECLARE @Dev_InventoryItemType_Food          smallint = 3
DECLARE @Dev_InventoryItemType_StinkyCheese  smallint = 4
DECLARE @Dev_InventoryItemTYpe_Potion        smallint = 5
DECLARE @Dev_InventoryItemType_Sulfuras      smallint = 6
DECLARE @Dev_InventoryItemType_BackStagePass smallint = 7
DECLARE @Dev_InventoryItemType_Conjured      smallint = 8
DECLARE @Dev_InventoryItemType_Miscellania   smallint = 9

--Load Test Data for the appropriate environment
IF '$(Environment)' = 'Dev'
BEGIN
PRINT 'Executing Data/TestData/Dev.sql...'

SET IDENTITY_INSERT dbo.InventoryItemType ON
INSERT INTO dbo.InventoryItemType (InventoryItemTypeId, Name, QualityDeltaStrategyId, BaseDelta, MinQuality, MaxQuality, CreatedDate, Description)
VALUES
	(@Dev_InventoryItemType_Weapon       , 'Weapon'        , @QualityDeltaStrategy_Linear       , 1.0,  0.0,   50.0, @Now, 'A thing to hit things.')
,	(@Dev_InventoryItemType_Armor        , 'Armor'         , @QualityDeltaStrategy_Linear       , 1.0,  0.0,   50.0, @Now, 'A thing to stop getting hit with things.')
,	(@Dev_InventoryItemType_Food         , 'Food'          , @QualityDeltaStrategy_Linear       , 1.0,  0.0,   50.0, @Now, 'Something to eat.')
,	(@Dev_InventoryItemType_StinkyCheese , 'Stinky Cheese' , @QualityDeltaStrategy_InverseLinear, 1.0,  0.0,   50.0, @Now, 'The older and stinkier, the better.')
,	(@Dev_InventoryItemTYpe_Potion       , 'Potion'        , @QualityDeltaStrategy_Linear       , 1.0,  0.0,   50.0, @Now, 'Quaff me.')
,	(@Dev_InventoryItemType_Sulfuras     , 'Sulfuras'      , @QualityDeltaStrategy_Static       , 1.0, 80.0,   80.0, @Now, 'It''s big! It''s heavy!  It''s sulfuron!.')
,	(@Dev_InventoryItemType_BackStagePass, 'Backstage Pass', @QualityDeltaStrategy_Event        , 1.0,  0.0,   50.0, @Now, 'VIP ONLY.')
,	(@Dev_InventoryItemType_Conjured     , 'Conjured'      , @QualityDeltaStrategy_Linear       , 2.0,  0.0,   50.0, @Now, 'Made from the finest crap available.')
,	(@Dev_InventoryItemType_Miscellania  , 'Miscellania'   , @QualityDeltaStrategy_Linear       , 1.0,  0.0,   50.0, @Now, 'The finest crap available.')
SET IDENTITY_INSERT dbo.InventoryItemType OFF




INSERT INTO dbo.InventoryItem (InventoryItemTypeId, Name, InitialQuality, CurrentQuality, InventoryDate, SellByDate, CreatedDate, Description)
VALUES
	(@Dev_InventoryItemType_Weapon       , 'Sword'                 , 50, 50, @Now, DATEADD(DAY, 30, @EndOfToday), GETUTCDATE(), 'Pointy.')
,	(@Dev_InventoryItemType_Weapon       , 'Axe'                   , 50, 50, @Now, DATEADD(DAY, 40, @EndOfToday), GETUTCDATE(), 'Smashy and sharp.')
,	(@Dev_InventoryItemType_Weapon       , 'Halberd'               , 40, 40, @Now, DATEADD(DAY, 60, @EndOfToday), GETUTCDATE(), 'Long, smashy and pointy.')
,	(@Dev_InventoryItemType_StinkyCheese , 'Aged Brie'             , 10, 10, @Now, DATEADD(DAY, 50, @EndOfToday), GETUTCDATE(), 'If it smells terrible, it''s ready to eat.')
,	(@Dev_InventoryItemType_Food         , 'Aged Milk'             , 20, 20, @Now, DATEADD(DAY, 20, @EndOfToday), GETUTCDATE(), 'Chunky style.')
,	(@Dev_InventoryItemType_Food         , 'Mutton'                , 10, 10, @Now, DATEADD(DAY, 10, @EndOfToday), GETUTCDATE(), 'Goes great with haggis.')
,	(@Dev_InventoryItemType_Sulfuras     , 'Hand of Ragnaros'      , 80, 80, @Now, DATEADD(DAY, 80, @EndOfToday), GETUTCDATE(), 'Pried from Ragnoros''s hot dead fingers.')
,	(@Dev_InventoryItemType_BackstagePass, 'I am Murloc'           , 10, 10, @Now, DATEADD(DAY, 20, @EndOfToday), GETUTCDATE(), 'Hear him roar.')
,	(@Dev_InventoryItemType_BackstagePass, 'Raging Ogre'           , 10, 10, @Now, DATEADD(DAY, 20, @EndOfToday), GETUTCDATE(), 'None.  None more black.')
,	(@Dev_InventoryItemType_Conjured     , 'Giant Slayer'          , 50, 50, @Now, DATEADD(DAY, 15, @EndOfToday), GETUTCDATE(), 'Giants hate this.')
,	(@Dev_InventoryItemType_Conjured     , 'Storm Hammer'          , 50, 50, @Now, DATEADD(DAY, 20, @EndOfToday), GETUTCDATE(), 'Lightning bolt!  Lightning bolt!  Lightning bolt!')
,	(@Dev_InventoryItemType_Conjured     , 'Belt of Giant Strenth' , 40, 40, @Now, DATEADD(DAY, 20, @EndOfToday), GETUTCDATE(), 'Do you event lift bro?')
,	(@Dev_InventoryItemType_Food         , 'Cheese'                ,  5,  5, @Now, DATEADD(DAY,  5, @EndOfToday), GETUTCDATE(), 'Just the regular kind.')
,	(@Dev_InventoryItemType_Food         , 'Potion of Healing'     , 10, 10, @Now, DATEADD(DAY, 10, @EndOfToday), GETUTCDATE(), 'Now 96% crack free!')
,	(@Dev_InventoryItemType_Miscellania  , 'Bag of Holding'        , 50, 50, @Now, DATEADD(DAY, 10, @EndOfToday), GETUTCDATE(), 'Don''t get caught with it.')
,	(@Dev_InventoryItemType_BackstagePass, 'TAFKAL80ETC Concert'   , 20, 20, @Now, DATEADD(DAY, 15, @EndOfToday), GETUTCDATE(), 'Pretty much as bad as you would expect.')
,	(@Dev_InventoryItemType_Potion       , 'Elixir of the Mongoose',  7,  7, @Now, DATEADD(DAY,  5, @EndOfToday), GETUTCDATE(), 'The mongoose did not enjoy this.')
,	(@Dev_InventoryItemType_Armor        , '+5 Dexterity Vest'     , 20, 20, @Now, DATEADD(DAY, 10, @EndOfToday), GETUTCDATE(), 'Sleeves are for losers.')
,	(@Dev_InventoryItemType_Armor        , 'Full Plate Mail'       , 50, 50, @Now, DATEADD(DAY, 50, @EndOfToday), GETUTCDATE(), 'Don''t fall down or you''ll probaby die there.  Eventually.')
,	(@Dev_InventoryItemType_Armor        , 'Wooden Shield'         , 30, 30, @Now, DATEADD(DAY, 10, @EndOfToday), GETUTCDATE(), 'It''s round.')
	

END

ELSE IF '$(Environment)' = 'QA'
BEGIN
	PRINT 'Executing Data/TestData/Dev.sql'

END

ELSE IF '$(Environment)' = 'Prod'
BEGIN
	PRINT 'Executing Data/TestData/Prod.sql...'



END


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
