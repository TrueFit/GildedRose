/*
Deployment script for GildedRose

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose"
:setvar DefaultFilePrefix "GildedRose"
:setvar DefaultDataPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Users TABLE (
	[Id] INT NOT NULL, 
    [UserName] NVARCHAR(100) NOT NULL,
	[Email] [Email] NOT NULL,
	[PasswordHash] [PWD] NOT NULL,
    [CreatedBy] [AuditUser]
);

 
INSERT INTO 
	@Users ([Id], [UserName], [Email], [PasswordHash], [CreatedBy]) 
VALUES
(1, 'talkersoft', 'talkersoft@gmail.com', 'abc', 1),
(2, 'jgretz', 'jgretz@truefit.io', 'efg', 1)

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE membership.Users AS t
USING @Users as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT (UserName, Email, PasswordHash, CreatedBy)
        VALUES (s.UserName, s.Email, s.PasswordHash, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
				t.UserName = s.UserName, 
				t.Email = s.Email, 
				t.PasswordHash = s.PasswordHash
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;
DECLARE @Categories TABLE (
    [Id] INT NOT NULL, 
    [Name] NVARCHAR(100) NOT NULL, 
    [CreatedBy] [AuditUser] NOT NULL
);

 
INSERT INTO 
	@Categories ([Id], [Name], [CreatedBy]) 
VALUES
(1, 'Weapon', 1),
(2, 'Food', 1),
(3, 'Sulfuras', 1),
(4, 'Backstage Passes', 1),
(5, 'Conjured', 1),
(6, 'Potion', 1),
(7, 'Misc', 1),
(8, 'Armor', 1);

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.Categories AS t
USING @Categories as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Name], CreatedBy)
        VALUES (s.[Name], s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET t.[Name] = s.[Name]
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;

DECLARE @Items TABLE (
    [Identifier] UNIQUEIDENTIFIER NOT NULL, 
    [Name] NVARCHAR(100) NOT NULL, 
    [Category] INT NOT NULL, 
	[ShelfLife] INT NOT NULL,
	[MaxQuality] INT NOT NULL,
	[IsLegendary] BIT NOT NULL,
	[IsDeleted] BIT NOT NULL,
    [CreatedBy] [AuditUser] NOT NULL
);

 
INSERT INTO 
	@Items ([Identifier] ,[Name] ,[Category] ,[ShelfLife] ,[MaxQuality] ,[IsLegendary] ,[IsDeleted] ,[CreatedBy]) 
VALUES
	('f3205dfd-55fe-4cd5-8070-b259e9db2f7b', 'Sword', dbo.getCategoryIdByName('Weapon'), 30, 50, 0, 0, 1),
	('35096084-af46-4e40-932e-655aab9bac00', 'Axe', dbo.getCategoryIdByName('Weapon'), 40, 50, 0, 0, 1),
	('e12e2698-79b6-4f15-bfa2-a1fab047aa27', 'Halberd', dbo.getCategoryIdByName('Weapon'), 60, 40, 0, 0, 1),
	('dddd657e-9617-4c82-bdc5-0ab53b5a6398', 'Aged Brie', dbo.getCategoryIdByName('Food'), 50, 10, 0, 0, 1),
	('02223851-8f9a-4b55-a925-e59be7855413', 'Aged Milk', dbo.getCategoryIdByName('Food'), 20, 20, 0, 0, 1),
	('e52e05f0-aba1-44e8-8003-435bb20bd660', 'Mutton', dbo.getCategoryIdByName('Food'), 10, 10, 0, 0, 1),
	('eea3072c-1579-469a-81c9-f2ba6302a0ca', 'Hand of Ragnaros', dbo.getCategoryIdByName('Sulfuras'), 80, 80, 1, 0, 1),
	('e2055eae-6d1f-45a9-9701-7c5fbf563e20', 'I am Murloc', dbo.getCategoryIdByName('Backstage Passes'), 20, 10, 0, 0, 1),
	('960fa030-70ac-4ff7-8ad8-07cea6ca84ce', 'Raging Ogre', dbo.getCategoryIdByName('Backstage Passes'), 10, 10, 0, 0, 1),
	('95a79f27-61e1-4c70-8039-0fdd703fc6e9', 'Giant Slayer', dbo.getCategoryIdByName('Conjured'), 15, 50, 0, 0, 1),
	('8686e4d9-a43c-4c46-bb72-81e9454609c6', 'Storm Hammer', dbo.getCategoryIdByName('Conjured'), 20, 50, 0, 0, 1),
	('3884fae6-6dd9-4e4f-bc04-bcb90f18dae7', 'Belt of Giant Strength', dbo.getCategoryIdByName('Conjured'), 20, 40, 0, 0, 1),
	('fc22fba7-7f78-4ac5-a155-d89a40a1940a', 'Cheese', dbo.getCategoryIdByName('Food'), 5, 5, 0, 0, 1),
	('f1ab5859-cd8a-46b2-9520-dd631cbde700', 'Potion of Healing', dbo.getCategoryIdByName('Potion'), 10, 10, 0, 0, 1),
	('a5091448-6848-4247-8d85-2ee5a6a8defb', 'Bag of Holding', dbo.getCategoryIdByName('Misc'), 10, 50, 0, 0, 1),
	('58c1acc3-0ce7-4a06-86f3-5052d223e48d', 'TAFKAL80ETC Concert', dbo.getCategoryIdByName('Backstage Passes'), 15, 20, 0, 0, 1),
	('49ca5c68-4fbd-4ef6-9fe8-e086c6ef81e6', 'Elixir of the Mongoose', dbo.getCategoryIdByName('Potion'), 5, 7, 0, 0, 1),
	('88bdb452-e23d-4b70-b07e-c9f3f3f0d1a9', '+5 Dexterity Vest', dbo.getCategoryIdByName('Armor'), 10, 20, 0, 0, 1),
	('15298b70-b493-43a8-b01e-2cccf5514a89', 'Full Plate Mail', dbo.getCategoryIdByName('Armor'), 50, 50, 0, 0, 1),
	('4bb48e57-245a-419e-880c-1b701dbb35c2', 'Wooden Shield', dbo.getCategoryIdByName('Armor'), 10, 30, 0, 0, 1);

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.Items AS t
USING @Items as s
	on 	(t.[Identifier] = s.[Identifier])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Identifier], [Name], Category, ShelfLife, MaxQuality, IsLegendary, IsDeleted, CreatedBy)
        VALUES (s.[Identifier], s.[Name], s.Category, s.ShelfLife, s.MaxQuality, s.IsLegendary, s.IsDeleted, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
		t.[Identifier] = s.[Identifier], 
		t.[Name] = s.[Name],
		t.Category = s.Category,
		t.ShelfLife = s.ShelfLife, 
		t.MaxQuality = s.MaxQuality,
		t.IsLegendary = s.IsLegendary,
		t.IsDeleted = s.IsDeleted
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;

DECLARE @ItemsOnHand TABLE (
	[Identifier] UNIQUEIDENTIFIER NOT NULL, 
    [ItemIdentifier] UNIQUEIDENTIFIER NOT NULL, 
	[StockCount] INT NOT NULL,
	[StockDate] DATETIME2 NOT NULL,
    [CreatedBy] [AuditUser] NOT NULL
);

 
INSERT INTO 
	@ItemsOnHand ([Identifier] ,[ItemIdentifier] ,[StockCount] ,[StockDate] ,[CreatedBy]) 
VALUES
    ('8C447991-8D82-4010-8D68-CDFF4D95C48A', dbo.getItemIdentifierByName('+5 Dexterity Vest'), 1, 1),
    ('90A3BEEB-15A4-4C5F-A1F6-E6205917D6FB', dbo.getItemIdentifierByName('Aged Brie'), 1, 1),
    ('CC8B35B5-A363-4A31-9949-B95F201E17D4', dbo.getItemIdentifierByName('Aged Milk'), 1, 1),
    ('D29AF790-7757-4003-A4F0-C5E7DF4D2C2E', dbo.getItemIdentifierByName('Axe'), 1, 1),
    ('8C751912-DB71-4AC6-993C-09DE4099DBB1', dbo.getItemIdentifierByName('Bag of Holding'), 1, 1),
    ('C82CC310-D2C8-4A2E-B4AC-685F8F27523D', dbo.getItemIdentifierByName('Belt of Giant Strength'), 1, 1),
    ('402B3660-D010-47C9-9322-6408F0B75215', dbo.getItemIdentifierByName('Cheese'), 1, 1),
    ('B07FF74D-0B57-44E5-B214-4A0341C888C6', dbo.getItemIdentifierByName('Elixir of the Mongoose'), 1, 1),
    ('49379114-888E-419D-B663-2FD2AD78683A', dbo.getItemIdentifierByName('Full Plate Mail'), 1, 1),
    ('AB027762-C333-4E25-AF55-7007C21C2076', dbo.getItemIdentifierByName('Giant Slayer'), 1, 1),
    ('CD8739D0-D297-49BD-99E7-97CFE21763AB', dbo.getItemIdentifierByName('Halberd'), 1, 1),
    ('43BFB62D-5873-4F39-B224-B4E5C3EEB285', dbo.getItemIdentifierByName('Hand of Ragnaros'), 1, 1),
    ('60690BE4-32B6-45DF-B4A1-1EFCFB619C3B', dbo.getItemIdentifierByName('I am Murloc'), 1, 1),
    ('4362620C-892C-42D7-8D50-57018E3366B0', dbo.getItemIdentifierByName('Mutton'), 1, 1),
    ('96A3361B-3827-42B1-B151-C1174A81210F', dbo.getItemIdentifierByName('Potion of Healing'), 1, 1),
    ('858A580B-7672-4B80-9227-8D161BB9D5CB', dbo.getItemIdentifierByName('Raging Ogre'), 1, 1),
    ('91BD280F-B580-44C2-BCF9-C2FF7C5F01C1', dbo.getItemIdentifierByName('Storm Hammer'), 1, 1),
    ('14AE9FBF-8178-4C54-AE78-8061F546C354', dbo.getItemIdentifierByName('Sword'), 1, 1),
    ('9103BB66-7552-4013-BE3D-F751033FD617', dbo.getItemIdentifierByName('TAFKAL80ETC Concert'), 1, 1),
    ('0AFFA6FC-FE61-40BE-A7B2-E9AC5D0F6781', dbo.getItemIdentifierByName('Wooden Shield'), 1, 1);


-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.ItemsOnHand AS t
USING @ItemsOnHand as s
	on 	(t.[Identifier] = s.[Identifier])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Identifier], [ItemIdentifier], [StockCount], [StockDate], [CreatedBy])
        VALUES (s.[Identifier], s.[ItemIdentifier], s.[StockCount], s.[StockDate], s.[CreatedBy])
WHEN MATCHED
    THEN UPDATE SET 
		t.[Identifier] = s.[Identifier], 
		t.[ItemIdentifier] = s.[ItemIdentifier],
		t.[StockCount] = s.[StockCount],
		t.[StockDate] = s.[StockDate]
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;

GO

GO
PRINT N'Update complete.';


GO
