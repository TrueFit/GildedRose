/*
Deployment script for GildedRose

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose"
:setvar DefaultFilePrefix "GildedRose"
:setvar DefaultDataPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
PRINT N'Creating [inventory]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [inventory];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [inventory_76946DE0], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_inventory_76946DE0.mdf') TO FILEGROUP [inventory];


GO
PRINT N'Creating [membership]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [membership];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [membership_70611F5A], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_membership_70611F5A.mdf') TO FILEGROUP [membership];


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [inventory]...';


GO
CREATE SCHEMA [inventory]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [membership]...';


GO
CREATE SCHEMA [membership]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[AuditDate]...';


GO
CREATE TYPE [dbo].[AuditDate]
    FROM DATETIME2 (0) NOT NULL;


GO
PRINT N'Creating [dbo].[AuditUser]...';


GO
CREATE TYPE [dbo].[AuditUser]
    FROM INT NOT NULL;


GO
PRINT N'Creating [dbo].[Email]...';


GO
CREATE TYPE [dbo].[Email]
    FROM NVARCHAR (255) NOT NULL;


GO
PRINT N'Creating [dbo].[PWD]...';


GO
CREATE TYPE [dbo].[PWD]
    FROM NVARCHAR (255) NOT NULL;


GO
PRINT N'Creating [inventory].[ItemsOnHand]...';


GO
CREATE TABLE [inventory].[ItemsOnHand] (
    [Identifier]     UNIQUEIDENTIFIER NOT NULL,
    [ItemIdentifier] UNIQUEIDENTIFIER NOT NULL,
    [StockCount]     INT              NOT NULL,
    [StockDate]      DATETIME2 (7)    NOT NULL,
    [Created]        DATETIME2 (7)    NOT NULL,
    [CreatedBy]      INT              NOT NULL,
    CONSTRAINT [PK_ItemOnHandIdentifier] PRIMARY KEY CLUSTERED ([Identifier] ASC) ON [inventory]
);


GO
PRINT N'Creating [inventory].[Categories]...';


GO
CREATE TABLE [inventory].[Categories] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (100) NOT NULL,
    [Created]   DATETIME2 (7)  NOT NULL,
    [CreatedBy] INT            NOT NULL,
    CONSTRAINT [PK_CategoryIdentifier] PRIMARY KEY CLUSTERED ([Id] ASC) ON [inventory]
);


GO
PRINT N'Creating [inventory].[Categories].[UIX_inventory_category_name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_inventory_category_name]
    ON [inventory].[Categories]([Name] ASC)
    ON [inventory];


GO
PRINT N'Creating [inventory].[Items]...';


GO
CREATE TABLE [inventory].[Items] (
    [Identifier]  UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (100)   NOT NULL,
    [Category]    INT              NOT NULL,
    [ShelfLife]   INT              NOT NULL,
    [MaxQuality]  INT              NOT NULL,
    [IsLegendary] BIT              NOT NULL,
    [IsDeleted]   BIT              NOT NULL,
    [Created]     DATETIME2 (7)    NOT NULL,
    [CreatedBy]   INT              NOT NULL,
    CONSTRAINT [PK_ItemIdentifier] PRIMARY KEY CLUSTERED ([Identifier] ASC) ON [inventory]
);


GO
PRINT N'Creating [inventory].[Items].[UIX_inventory_item_name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_inventory_item_name]
    ON [inventory].[Items]([Name] ASC)
    ON [inventory];


GO
PRINT N'Creating [inventory].[Items].[IX_Items_lookup]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Items_lookup]
    ON [inventory].[Items]([Identifier] ASC)
    INCLUDE([Name], [Category]) WHERE IsDeleted = 0;


GO
PRINT N'Creating [membership].[Users]...';


GO
CREATE TABLE [membership].[Users] (
    [Id]           INT               IDENTITY (1, 1) NOT NULL,
    [UserName]     NVARCHAR (100)    NOT NULL,
    [Email]        [dbo].[Email]     NOT NULL,
    [PasswordHash] [dbo].[PWD]       NOT NULL,
    [Created]      [dbo].[AuditDate] NOT NULL,
    [CreatedBy]    [dbo].[AuditUser] NOT NULL,
    CONSTRAINT [PK_CategoryIdentifier] PRIMARY KEY CLUSTERED ([Id] ASC) ON [membership]
);


GO
PRINT N'Creating unnamed constraint on [inventory].[ItemsOnHand]...';


GO
ALTER TABLE [inventory].[ItemsOnHand]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [inventory].[Categories]...';


GO
ALTER TABLE [inventory].[Categories]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [inventory].[Items]...';


GO
ALTER TABLE [inventory].[Items]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [membership].[Users]...';


GO
ALTER TABLE [membership].[Users]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating [inventory].[FK_ItemsOnHand_Items]...';


GO
ALTER TABLE [inventory].[ItemsOnHand]
    ADD CONSTRAINT [FK_ItemsOnHand_Items] FOREIGN KEY ([ItemIdentifier]) REFERENCES [inventory].[Items] ([Identifier]);


GO
PRINT N'Creating [inventory].[FK_Items_Category]...';


GO
ALTER TABLE [inventory].[Items]
    ADD CONSTRAINT [FK_Items_Category] FOREIGN KEY ([Category]) REFERENCES [inventory].[Categories] ([Id]);


GO
PRINT N'Creating [dbo].[getCategoryIdByName]...';


GO
CREATE FUNCTION [dbo].[getCategoryIdByName](@CategoryName VARCHAR(100))
RETURNS INT
AS
BEGIN
	RETURN(SELECT 
				Id
			FROM 
				inventory.Categories
			WHERE
				[Name] = @CategoryName);
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Users TABLE (
	[Id] INT NOT NULL, 
    [UserName] NVARCHAR(100) NOT NULL,
	[Email] [Email] NOT NULL,
	[PasswordHash] [PWD] NOT NULL,
	[Created] [AuditDate] DEFAULT getutcdate(),
    [CreatedBy] [AuditUser]
);

 
INSERT INTO 
	@Users ([Id], [UserName], [Email], [PasswordHash], [CreatedBy]) 
VALUES
(1, 'talkersoft', 'talkersoft@gmail.com', 'abc', 1),
(2, 'jgretz', 'jgretz@truefit.io', 'efg', 1)

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE membership.Users AS t
USING @Users as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT (UserName, Email, PasswordHash, Created, CreatedBy)
        VALUES (s.UserName, s.Email, s.PasswordHash, s.Created, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
				t.UserName = s.UserName, 
				t.Email = s.Email, 
				t.PasswordHash = s.PasswordHash, 
				t.CreatedBy = s.CreatedBy
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;
DECLARE @Categories TABLE (
    [Id] INT NOT NULL, 
    [Name] NVARCHAR(100) NOT NULL, 
	[Created] DATETIME2 NOT NULL DEFAULT getutcdate(),
    [CreatedBy] INT NOT NULL
);

 
INSERT INTO 
	@Categories ([Id], [Name], [CreatedBy]) 
VALUES
(1, 'Weapon', 1),
(2, 'Food', 1),
(3, 'Sulfuras', 1),
(4, 'Backstage Passes', 1),
(5, 'Conjured', 1),
(6, 'Potion', 1),
(7, 'Misc', 1),
(8, 'Armor', 1);

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.Categories AS t
USING @Categories as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Name], Created, CreatedBy)
        VALUES (s.[Name], s.Created, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET t.[Name] = s.[Name], t.CreatedBy = s.CreatedBy
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
