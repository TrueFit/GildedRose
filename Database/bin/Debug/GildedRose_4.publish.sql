/*
Deployment script for GildedRose

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose"
:setvar DefaultFilePrefix "GildedRose"
:setvar DefaultDataPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

DECLARE @Categories TABLE (
    [Name] NVARCHAR(100) NOT NULL, 
	[Created] DATETIME2 NOT NULL DEFAULT getutcdate(),
    [CreatedBy] INT NOT NULL
);

INSERT INTO 
	@Categories ([Name], [Created], [CreatedBy]) 
VALUES
('Weapon', getdate(), 1),
('Food', getdate(), 1),
('Sulfuras', getdate(), 1),
('Backstage Passes', getdate(), 1),
('Conjured', getdate(), 1),
('Potion', getdate(), 1),
('Misc', getdate(), 1),
('Armor', getdate(), 1);

-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.Categories AS t
USING @Categories as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Name], Created, CreatedBy)
        VALUES (s.[Name], s.Created, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET t.[Name] = s.[Name], t.Created = s.Created, t.CreatedBy = s.CreatedBy
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;



GO

GO
PRINT N'Update complete.';


GO
