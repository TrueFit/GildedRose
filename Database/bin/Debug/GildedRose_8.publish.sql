/*
Deployment script for GildedRose

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose"
:setvar DefaultFilePrefix "GildedRose"
:setvar DefaultDataPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Users TABLE (
	[Id] INT NOT NULL, 
    [UserName] NVARCHAR(100) NOT NULL,
	[Email] [Email] NOT NULL,
	[PasswordHash] [PWD] NOT NULL,
	[Created] [AuditDate] DEFAULT getutcdate(),
    [CreatedBy] [AuditUser]
);

 
INSERT INTO 
	@Users ([Id], [UserName], [Email], [PasswordHash], [CreatedBy]) 
VALUES
(1, 'talkersoft', 'talkersoft@gmail.com', 'abc', 1),
(1, 'jgretz', 'jgretz@truefit.io', 'efg', 1)

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE membership.Users AS t
USING @Users as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Name], UserName, Email, PasswordHash, Created, CreatedBy)
        VALUES (s.[Name], s.UserName, s.Email, s.PasswordHash, s.Created, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
				t.[Name] = s.[Name], 
				t.UserName = s.UserName, 
				t.Email = s.Email, 
				t.PasswordHash = s.PasswordHash, 
				t.Created = s.Created, 
				t.CreatedBy = s.CreatedBy
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;
DECLARE @Categories TABLE (
    [Id] INT NOT NULL, 
    [Name] NVARCHAR(100) NOT NULL, 
	[Created] DATETIME2 NOT NULL DEFAULT getutcdate(),
    [CreatedBy] INT NOT NULL
);

 
INSERT INTO 
	@Categories ([Id], [Name], [CreatedBy]) 
VALUES
(1, 'Weapon', 1),
(2, 'Food', 1),
(3, 'Sulfuras', 1),
(4, 'Backstage Passes', 1),
(5, 'Conjured', 1),
(6, 'Potion', 1),
(7, 'Misc', 1),
(8, 'Armor', 1);

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE inventory.Categories AS t
USING @Categories as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT ([Name], Created, CreatedBy)
        VALUES (s.[Name], s.Created, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET t.[Name] = s.[Name], t.Created = s.Created, t.CreatedBy = s.CreatedBy
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;



GO

GO
PRINT N'Update complete.';


GO
