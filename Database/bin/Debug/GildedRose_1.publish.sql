/*
Deployment script for GildedRose

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose"
:setvar DefaultFilePrefix "GildedRose"
:setvar DefaultDataPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\Todd\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Creating [inventory]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [inventory];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [inventory_120000B2], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_inventory_120000B2.mdf') TO FILEGROUP [inventory];


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [inventory]...';


GO
CREATE SCHEMA [inventory]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [inventory].[Categories]...';


GO
CREATE TABLE [inventory].[Categories] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (100) NOT NULL,
    [ShelfLifeByDays] INT            NOT NULL,
    [IsLegendary]     BIT            NOT NULL,
    [Created]         DATETIME2 (7)  NOT NULL,
    [CreatedBy]       INT            NOT NULL,
    CONSTRAINT [PK_CategoryIdentifier] PRIMARY KEY CLUSTERED ([Id] ASC) ON [inventory]
);


GO
PRINT N'Creating [inventory].[Categories].[UIX_inventory_category_name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_inventory_category_name]
    ON [inventory].[Categories]([Name] ASC)
    ON [inventory];


GO
PRINT N'Creating [inventory].[Items]...';


GO
CREATE TABLE [inventory].[Items] (
    [Identifier]      UNIQUEIDENTIFIER NOT NULL,
    [Name]            NVARCHAR (100)   NOT NULL,
    [Category]        INT              NOT NULL,
    [ShelfLifeByDays] INT              NOT NULL,
    [IsDeleted]       BIT              NOT NULL,
    [Created]         DATETIME2 (7)    NOT NULL,
    [CreatedBy]       INT              NOT NULL,
    CONSTRAINT [PK_ItemIdentifier] PRIMARY KEY CLUSTERED ([Identifier] ASC) ON [inventory]
);


GO
PRINT N'Creating [inventory].[Items].[UIX_inventory_item_name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_inventory_item_name]
    ON [inventory].[Items]([Name] ASC)
    ON [inventory];


GO
PRINT N'Creating [inventory].[Items].[IX_Items_lookup]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Items_lookup]
    ON [inventory].[Items]([Identifier] ASC)
    INCLUDE([Name], [Category]) WHERE IsDeleted = 0;


GO
PRINT N'Creating [inventory].[ItemsOnHand]...';


GO
CREATE TABLE [inventory].[ItemsOnHand] (
    [Identifier]     UNIQUEIDENTIFIER NOT NULL,
    [ItemIdentifier] UNIQUEIDENTIFIER NOT NULL,
    [StockCount]     INT              NOT NULL,
    [DateAdded]      DATETIME2 (7)    NOT NULL,
    [Created]        DATETIME2 (7)    NOT NULL,
    [CreatedBy]      INT              NOT NULL,
    CONSTRAINT [PK_ItemOnHandIdentifier] PRIMARY KEY CLUSTERED ([Identifier] ASC) ON [inventory]
);


GO
PRINT N'Creating unnamed constraint on [inventory].[Categories]...';


GO
ALTER TABLE [inventory].[Categories]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [inventory].[Items]...';


GO
ALTER TABLE [inventory].[Items]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [inventory].[ItemsOnHand]...';


GO
ALTER TABLE [inventory].[ItemsOnHand]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating [inventory].[FK_Items_Category]...';


GO
ALTER TABLE [inventory].[Items] WITH NOCHECK
    ADD CONSTRAINT [FK_Items_Category] FOREIGN KEY ([Category]) REFERENCES [inventory].[Categories] ([Id]);


GO
PRINT N'Creating [inventory].[FK_ItemsOnHand_Items]...';


GO
ALTER TABLE [inventory].[ItemsOnHand] WITH NOCHECK
    ADD CONSTRAINT [FK_ItemsOnHand_Items] FOREIGN KEY ([ItemIdentifier]) REFERENCES [inventory].[Items] ([Identifier]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [inventory].[Items] WITH CHECK CHECK CONSTRAINT [FK_Items_Category];

ALTER TABLE [inventory].[ItemsOnHand] WITH CHECK CHECK CONSTRAINT [FK_ItemsOnHand_Items];


GO
PRINT N'Update complete.';


GO
