// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace GildedRose.Models
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class GildedRoseContext : System.Data.Entity.DbContext, IGildedRoseContext
    {
        public System.Data.Entity.DbSet<AgingScheme> AgingSchemes { get; set; } // AgingScheme
        public System.Data.Entity.DbSet<AgingThreshold> AgingThresholds { get; set; } // AgingThreshold
        public System.Data.Entity.DbSet<Category> Categories { get; set; } // Category
        public System.Data.Entity.DbSet<InventoryCsvImport> InventoryCsvImports { get; set; } // InventoryCsvImport
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Product
        public System.Data.Entity.DbSet<VProductCategoryAging> VProductCategoryAgings { get; set; } // vProductCategoryAging

        static GildedRoseContext()
        {
            System.Data.Entity.Database.SetInitializer<GildedRoseContext>(null);
        }

        public GildedRoseContext()
            : base("Name=GildedRoseContext")
        {
        }

        public GildedRoseContext(string connectionString)
            : base(connectionString)
        {
        }

        public GildedRoseContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public GildedRoseContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public GildedRoseContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AgingSchemeMap());
            modelBuilder.Configurations.Add(new AgingThresholdMap());
            modelBuilder.Configurations.Add(new CategoryMap());
            modelBuilder.Configurations.Add(new InventoryCsvImportMap());
            modelBuilder.Configurations.Add(new ProductMap());
            modelBuilder.Configurations.Add(new VProductCategoryAgingMap());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AgingSchemeMap(schema));
            modelBuilder.Configurations.Add(new AgingThresholdMap(schema));
            modelBuilder.Configurations.Add(new CategoryMap(schema));
            modelBuilder.Configurations.Add(new InventoryCsvImportMap(schema));
            modelBuilder.Configurations.Add(new ProductMap(schema));
            modelBuilder.Configurations.Add(new VProductCategoryAgingMap(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int ImportAgingCsv(System.DateTime? receiptDate)
        {
            var receiptDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReceiptDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = receiptDate.GetValueOrDefault() };
            if (!receiptDate.HasValue)
                receiptDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ImportAgingCSV] @ReceiptDate", receiptDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ProductAgingList> ProductAgingList(System.DateTime? referenceDate, System.DateTime? asOfDate, System.Guid? productId)
        {
            int procResult;
            return ProductAgingList(referenceDate, asOfDate, productId, out procResult);
        }

        public System.Collections.Generic.List<ProductAgingList> ProductAgingList(System.DateTime? referenceDate, System.DateTime? asOfDate, System.Guid? productId, out int procResult)
        {
            var referenceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReferenceDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = referenceDate.GetValueOrDefault() };
            if (!referenceDate.HasValue)
                referenceDateParam.Value = System.DBNull.Value;

            var asOfDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AsOfDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = asOfDate.GetValueOrDefault() };
            if (!asOfDate.HasValue)
                asOfDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault() };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ProductAgingList>("EXEC @procResult = [dbo].[ProductAgingList] @ReferenceDate, @AsOfDate, @ProductId", referenceDateParam, asOfDateParam, productIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ProductAgingList>> ProductAgingListAsync(System.DateTime? referenceDate, System.DateTime? asOfDate, System.Guid? productId)
        {
            var referenceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ReferenceDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = referenceDate.GetValueOrDefault() };
            if (!referenceDate.HasValue)
                referenceDateParam.Value = System.DBNull.Value;

            var asOfDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AsOfDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = asOfDate.GetValueOrDefault() };
            if (!asOfDate.HasValue)
                asOfDateParam.Value = System.DBNull.Value;

            var productIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ProductId", SqlDbType = System.Data.SqlDbType.UniqueIdentifier, Direction = System.Data.ParameterDirection.Input, Value = productId.GetValueOrDefault() };
            if (!productId.HasValue)
                productIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<ProductAgingList>("EXEC [dbo].[ProductAgingList] @ReferenceDate, @AsOfDate, @ProductId", referenceDateParam, asOfDateParam, productIdParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
