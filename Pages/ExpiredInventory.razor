@page "/trash"

@using GildedRose.Data
@using GildedRose.Services
@inject InventoryService _inventoryService
@inject IJSRuntime _jsRuntime

<h1>Gilded Rose - Trash Bin</h1>



@if (_inventory == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">Search by Name:</span>
            </div>
            <input class="form-control" type="text" placeholder="Filter..."
                   @bind="Filter"
                   @bind:event="oninput">
        </div>
        <button class="btn btn-primary float-right" @onclick="EmptyTrash">EmptyTrash</button>
    </div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>SellIn</th>
                <th>Quality</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _inventory)
            {
                if (!IsVisible(item))
                    continue;

                <tr>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.SellIn</td>
                    <td>@item.Quality</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<IItem> _inventory;

    protected override async Task OnInitializedAsync()
    {
        if (_inventoryService.IsLoaded())
            _inventory = _inventoryService.ViewExpiredInventory();
        else
        {
            _inventory = await _inventoryService.GetInventory();
            _inventory = _inventoryService.ViewExpiredInventory();
        }
    }

    public string Filter { get; set; }

    public bool IsVisible(IItem item)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (item.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (item.Category.StartsWith(Filter))
            return true;

        return false;
    }

    private async void EmptyTrash()
    {
        _inventory = _inventoryService.EmptyTrash();

        // I'd prefer this be something non-modal like a snackbar
        if (!await _jsRuntime.InvokeAsync<bool>("confirm", "Trash was emptied."))
            return;
    }

}
